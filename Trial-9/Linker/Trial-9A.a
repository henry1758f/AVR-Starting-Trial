;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2015/5/26
;Author  : PerTic@n
;Company : If You Like This Software,Buy It
;Comments:
;
;
;Chip type               : AT90S8535
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <90s8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x30
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;#define true 1
;#define false 0
;void TXdata(unsigned char);
;unsigned char RXdata();
;// Declare your global variables here
;
;void main(void)
; 0000 0023 {

	.CSEG
;PCODE: $0000000A VOL: 0
; 0000 0024 // Declare your local variables here
; 0000 0025        unsigned char i;
; 0000 0026 // Input/Output Ports initialization
; 0000 0027 // Port A initialization
; 0000 0028 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=Out
; 0000 0029 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=0
; 0000 002A PORTA=0x00;
;	i -> R16
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 002B DDRA=0xFF;
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002C 
; 0000 002D // Port B initialization
; 0000 002E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 002F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0030 PORTB=0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0031 DDRB=0x00;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0032 
; 0000 0033 // Port C initialization
; 0000 0034 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0035 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0036 PORTC=0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0037 DDRC=0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0038 
; 0000 0039 // Port D initialization
; 0000 003A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003C PORTD=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003D DDRD=0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003E 
; 0000 003F // Timer/Counter 0 initialization
; 0000 0040 // Clock source: System Clock
; 0000 0041 // Clock value: Timer 0 Stopped
; 0000 0042 TCCR0=0x00;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0043 TCNT0=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0044 
; 0000 0045 // Timer/Counter 1 initialization
; 0000 0046 // Clock source: System Clock
; 0000 0047 // Clock value: Timer1 Stopped
; 0000 0048 // Mode: Normal top=0xFFFF
; 0000 0049 // OC1A output: Discon.
; 0000 004A // OC1B output: Discon.
; 0000 004B // Noise Canceler: Off
; 0000 004C // Input Capture on Falling Edge
; 0000 004D // Timer1 Overflow Interrupt: Off
; 0000 004E // Input Capture Interrupt: Off
; 0000 004F // Compare A Match Interrupt: Off
; 0000 0050 // Compare B Match Interrupt: Off
; 0000 0051 TCCR1A=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0052 TCCR1B=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0053 TCNT1H=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0054 TCNT1L=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0055 OCR1AH=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0056 OCR1AL=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0057 OCR1BH=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0058 OCR1BL=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0059 
; 0000 005A // Timer/Counter 2 initialization
; 0000 005B // Clock source: System Clock
; 0000 005C // Clock value: Timer2 Stopped
; 0000 005D // Mode: Normal top=0xFF
; 0000 005E // OC2 output: Disconnected
; 0000 005F ASSR=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0060 TCCR2=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0061 TCNT2=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0062 OCR2=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0063 
; 0000 0064 // External Interrupt(s) initialization
; 0000 0065 // INT0: Off
; 0000 0066 // INT1: Off
; 0000 0067 GIMSK=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0068 MCUCR=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0069 
; 0000 006A // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 006B TIMSK=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 006C 
; 0000 006D // UART initialization
; 0000 006E // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 006F // UART Receiver: On
; 0000 0070 // UART Transmitter: On
; 0000 0071 // UART Baud Rate: 9600
; 0000 0072 UCR=0x18;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0073 UBRR=0x33;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0074 
; 0000 0075 // Analog Comparator initialization
; 0000 0076 // Analog Comparator: Off
; 0000 0077 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0078 ACSR=0x80;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0079 
; 0000 007A // ADC initialization
; 0000 007B // ADC disabled
; 0000 007C ADCSR=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 007D 
; 0000 007E // SPI initialization
; 0000 007F // SPI disabled
; 0000 0080 SPCR=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0081 
; 0000 0082 while (1)
;PCODE: $00000047 VOL: 0
; 0000 0083       {
; 0000 0084         if(RXdata()=='A')
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0085         {
; 0000 0086             PORTA.PORTA0=1;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0087 
; 0000 0088             //while(i<250)
; 0000 0089             //{
; 0000 008A                 //delay_ms(10);
; 0000 008B               TXdata('C');
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 008C               //i++;
; 0000 008D             //}
; 0000 008E         }
; 0000 008F         /*else
; 0000 0090         {
; 0000 0091                PORTA.0=1;
; 0000 0092                 delay_ms(500);
; 0000 0093                  PORTA.0=0;
; 0000 0094                 delay_ms(500);
; 0000 0095         }*/
; 0000 0096 
; 0000 0097       }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0098 }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;
;void TXdata(unsigned char data)
; 0000 009B {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 009C     while(USR.UDRE==0);
;PCODE: $00000057 VOL: 0
;	data -> Y+0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 009D     UDR=data;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 009E     while(USR.TXC==0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 009F 
; 0000 00A0 }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;
;unsigned char RXdata()
; 0000 00A3 {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00A4     unsigned char data;
; 0000 00A5 
; 0000 00A6     while(USR.RXC==0);
;PCODE: $0000006B VOL: 0
;	data -> R16
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00A7     data=UDR;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00A8     UDR=0;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A9     return data;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00AA }
;PCODE: $00000079 VOL: 0
;
