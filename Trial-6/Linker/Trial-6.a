;    /*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2015/5/1
;Author  :
;Company :
;Comments:
;
;
;Chip type               : AT90S8535
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <90s8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x30
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#include <delay.h>
;/*TIMER SETTING CONFIG DEFINE*/
;#define STOP 0x00
;#define FOSC1 0x01
;#define FOSC8 0x02
;#define FOSC64 0x03
;#define FOSC256 0x04
;#define FOSC1024 0x05
;/*TIMER0 SET*/
;#define T0SET FOSC8
;
;
;int Year=2015,microSecond=0,sysclk=0;
;unsigned char Month=12,Day=31,Hour=23,Minute=59,Second=55;
;unsigned char lcd_loc[9][2]={{0,0},{2,0},{7,0},{10,0},{0,1},{2,1},{5,1},{8,1},{11,1}};

	.DSEG
;unsigned char onum[4],o2num[2];
;
;void output_time();
;void output_day();
;void decoder(unsigned int inum);
;void d2ecoder(unsigned int);
;unsigned char value2char(unsigned char);
;void caculate();
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0035 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0036 // Place your code here
; 0000 0037 
; 0000 0038 }
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;
;// Timer 0 overflow interrupt service routine
;#define ADDIV 38
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 003D {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 003E     sysclk++;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 003F     microSecond=sysclk/ADDIV;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0040     //Second=sysclk/ADDIV;
; 0000 0041     //Second++;
; 0000 0042     if(sysclk%ADDIV==0)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0043     {
; 0000 0044         PORTA=0x01;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0045         PORTA=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0046 
; 0000 0047     }
; 0000 0048     TCNT0=0x44;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0049     //caculate();
; 0000 004A }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 0050 {
;PCODE: $00000027 VOL: 0
; 0000 0051 // Declare your local variables here
; 0000 0052 
; 0000 0053 
; 0000 0054 // Input/Output Ports initialization
; 0000 0055 // Port A initialization
; 0000 0056 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0057 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0058 PORTA=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0059 DDRA=0x01;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 005A 
; 0000 005B // Port B initialization
; 0000 005C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005E PORTB=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 005F DDRB=0xFF;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0060 
; 0000 0061 // Port C initialization
; 0000 0062 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0063 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0064 PORTC=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0065 DDRC=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0066 
; 0000 0067 // Port D initialization
; 0000 0068 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0069 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006A PORTD=0x40;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 006B DDRD=0x40;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 006C 
; 0000 006D // Timer/Counter 0 initialization
; 0000 006E // Clock source: System Clock
; 0000 006F // Clock value: 1000.000 kHz
; 0000 0070 TCCR0=STOP;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0071 TCNT0=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0072 
; 0000 0073 // Timer/Counter 1 initialization
; 0000 0074 // Clock source: System Clock
; 0000 0075 // Clock value: Timer1 Stopped
; 0000 0076 // Mode: Normal top=0xFFFF
; 0000 0077 // OC1A output: Discon.
; 0000 0078 // OC1B output: Discon.
; 0000 0079 // Noise Canceler: Off
; 0000 007A // Input Capture on Falling Edge
; 0000 007B // Timer1 Overflow Interrupt: Off
; 0000 007C // Input Capture Interrupt: Off
; 0000 007D // Compare A Match Interrupt: Off
; 0000 007E // Compare B Match Interrupt: Off
; 0000 007F TCCR1A=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0080 TCCR1B=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0081 TCNT1H=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0082 TCNT1L=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0083 OCR1AH=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0084 OCR1AL=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0085 OCR1BH=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0086 OCR1BL=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0087 
; 0000 0088 // Timer/Counter 2 initialization
; 0000 0089 // Clock source: System Clock
; 0000 008A // Clock value: Timer2 Stopped
; 0000 008B // Mode: Normal top=0xFF
; 0000 008C // OC2 output: Disconnected
; 0000 008D ASSR=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 008E TCCR2=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 008F TCNT2=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0090 OCR2=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0091 
; 0000 0092 // External Interrupt(s) initialization
; 0000 0093 // INT0: On
; 0000 0094 // INT0 Mode: Rising Edge
; 0000 0095 // INT1: Off
; 0000 0096 GIMSK=0x40;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0097 MCUCR=0x03;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0098 GIFR=0x40;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0099 
; 0000 009A // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 009B TIMSK=0x01;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 009C 
; 0000 009D // UART initialization
; 0000 009E // UART disabled
; 0000 009F UCR=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00A0 
; 0000 00A1 // Analog Comparator initialization
; 0000 00A2 // Analog Comparator: Off
; 0000 00A3 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00A4 ACSR=0x80;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00A5 
; 0000 00A6 // ADC initialization
; 0000 00A7 // ADC disabled
; 0000 00A8 ADCSR=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00A9 
; 0000 00AA // SPI initialization
; 0000 00AB // SPI disabled
; 0000 00AC SPCR=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00AD 
; 0000 00AE // Alphanumeric LCD initialization
; 0000 00AF // Connections are specified in the
; 0000 00B0 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00B1 // RS - PORTD Bit 5
; 0000 00B2 // RD - PORTD Bit 4
; 0000 00B3 // EN - PORTD Bit 0
; 0000 00B4 // D4 - PORTB Bit 4
; 0000 00B5 // D5 - PORTB Bit 5
; 0000 00B6 // D6 - PORTB Bit 6
; 0000 00B7 // D7 - PORTB Bit 7
; 0000 00B8 // Characters/line: 16
; 0000 00B9 lcd_init(16);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00BA 
; 0000 00BB // Global enable interrupts
; 0000 00BC #asm("sei")
;PCODE: $00000066 VOL: 0
	sei
;PCODE: $00000067 VOL: 0
; 0000 00BD 
; 0000 00BE     lcd_gotoxy(0,0);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00BF     lcd_putsf("This is a clock!");
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00C0     lcd_gotoxy(3,1);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00C1     lcd_putsf("Verison 0.1");
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00C2     delay_ms(3000);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00C3     lcd_clear();
;PCODE: $00000078 VOL: 0
; 0000 00C4     delay_ms(1000);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00C5     lcd_gotoxy(0,0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00C6     lcd_putsf("AD1999/12/31");
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00C7     lcd_gotoxy(3,1);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00C8     lcd_putsf("00:00\'00\"0000");
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00C9     output_day();
;PCODE: $00000089 VOL: 0
; 0000 00CA     TCCR0=T0SET;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00CB       while (1)
;PCODE: $0000008C VOL: 0
; 0000 00CC       {
; 0000 00CD       // Place your code here
; 0000 00CE          delay_ms(8);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00CF          caculate();
;PCODE: $00000090 VOL: 0
; 0000 00D0          //output_time();
; 0000 00D1       }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00D2 }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;
;void output_time()
; 0000 00D5 {
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00D6     unsigned char i;
; 0000 00D7     lcd_gotoxy(0,1);
;PCODE: $00000098 VOL: 0
;	i -> R16
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00D8     lcd_putsf("   ");
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00D9     lcd_gotoxy(3,1); //hour
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00DA     d2ecoder(Hour);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00DB     lcd_puts(o2num);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00DC     lcd_gotoxy(5,1);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00DD     lcd_putchar(':');
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00DE     lcd_gotoxy(6,1); //minute
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00DF     d2ecoder(Minute);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00E0     lcd_puts(o2num);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00E1     lcd_gotoxy(8,1);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00E2     lcd_putchar('\'');
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00E3     lcd_gotoxy(9,1); //second
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00E4     d2ecoder(Second);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00E5     lcd_puts(o2num);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E6     lcd_gotoxy(11,1);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00E7     lcd_putsf("     ");
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00E8 
; 0000 00E9     /*
; 0000 00EA     lcd_putchar('\"');
; 0000 00EB     lcd_gotoxy(12,1); //microsecond
; 0000 00EC     d2ecoder(microSecond);
; 0000 00ED     lcd_puts(o2num);
; 0000 00EE       */
; 0000 00EF 
; 0000 00F0 
; 0000 00F1 }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;
;void output_day()
; 0000 00F4 {
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00F5     lcd_gotoxy(0,0);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00F6     lcd_putsf("AD");
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00F7     lcd_gotoxy(2,0); //Year
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00F8     decoder(Year);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00F9     lcd_puts(onum);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00FA     lcd_gotoxy(6,0);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00FB     lcd_putchar('//');
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00FC     lcd_gotoxy(7,0); //Month
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00FD     d2ecoder(Month);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00FE     lcd_puts(o2num);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00FF     lcd_gotoxy(9,0);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0100     lcd_putchar('//');
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0101     lcd_gotoxy(10,0); //Day
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0102     d2ecoder(Day);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0103     lcd_puts(o2num);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0104     lcd_gotoxy(12,0);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0105     lcd_putsf("    ");
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0106 }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;
;void decoder(unsigned int inum)
; 0000 0109 {
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 010A     unsigned char i;
; 0000 010B     if(inum<10)
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;	inum -> Y+1
;	i -> R16
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 010C     {
; 0000 010D         onum[3]=inum;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 010E         onum[2]=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 010F         onum[1]=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0110         onum[0]=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0111     }
; 0000 0112     else if(inum<100 && inum>=10)
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0113     {
; 0000 0114         onum[3]=inum%10;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0115         inum=(inum-inum%10)/10;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0116         onum[2]=inum%10;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0117         onum[1]=0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0118         onum[0]=0x00;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0119     }
; 0000 011A     else if(inum<1000 && inum>=100)
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 011B     {
; 0000 011C         onum[3]=inum%10;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 011D         inum=(inum-inum%10)/10;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 011E         onum[2]=inum%10;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 011F         inum=(inum-inum%10)/10;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0120         onum[1]=inum%10;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0121         onum[0]=0x00;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0122     }
; 0000 0123     else if(inum<10000 && inum>=1000)
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0124     {
; 0000 0125         onum[3]=inum%10;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0126         inum=(inum-inum%10)/10;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0127         onum[2]=inum%10;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0128         inum=(inum-inum%10)/10;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0129         onum[1]=inum%10;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 012A         inum=(inum-inum%10)/10;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 012B         onum[0]=inum%10;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 012C     }
; 0000 012D     for(i=0;i<4;i++)
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 012E     {
; 0000 012F         onum[i]=value2char(onum[i]);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0130     }
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0131     return;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0132 }
;PCODE: $000001C0 VOL: 0
;
;void d2ecoder(unsigned int inum)
; 0000 0135 {
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0136     unsigned char i;
; 0000 0137     if(inum<10)
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;	inum -> Y+1
;	i -> R16
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0138     {
; 0000 0139         o2num[1]=inum;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 013A         o2num[0]=0x00;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 013B 
; 0000 013C     }
; 0000 013D     else if(inum<100 && inum>=10)
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 013E     {
; 0000 013F         o2num[1]=inum%10;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0140         inum=(inum-inum%10)/10;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0141         o2num[0]=inum%10;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0142     }
; 0000 0143     for(i=0;i<2;i++)
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0144     {
; 0000 0145         o2num[i]=value2char(o2num[i]);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0146     }
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0147     return;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0148 }
;PCODE: $00000206 VOL: 0
;
;unsigned char value2char(unsigned char value)
; 0000 014B {
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 014C     if(value==0)
;PCODE: $00000209 VOL: 0
;	value -> Y+0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 014D     {
; 0000 014E         return '0';
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 014F     }
; 0000 0150     else if(value ==1)
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0151     {
; 0000 0152         return '1';
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0153     }
; 0000 0154     else if(value == 2)
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0155     {
; 0000 0156         return '2';
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0157     }
; 0000 0158     else if(value == 3)
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0159     {
; 0000 015A         return '3';
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 015B     }
; 0000 015C     else if(value == 4)
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 015D     {
; 0000 015E         return '4';
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 015F     }
; 0000 0160     else if(value == 5)
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0161     {
; 0000 0162         return '5';
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0163     }
; 0000 0164     else if(value == 6)
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0165     {
; 0000 0166         return '6';
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0167     }
; 0000 0168     else if(value == 7)
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0169     {
; 0000 016A         return '7';
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 016B     }
; 0000 016C     else if(value == 8)
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 016D     {
; 0000 016E         return '8';
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 016F     }
; 0000 0170     else if(value == 9)
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0171     {
; 0000 0172         return '9';
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0173     }
; 0000 0174 }
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;
;void caculate()
; 0000 0177 {
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0178     unsigned char eod=0,prt=0;
; 0000 0179     if(microSecond>100)
;PCODE: $0000025E VOL: 0
;	eod -> R16
;	prt -> R17
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 017A     {
; 0000 017B         Second++;
;PCODE: $00000266 VOL: 0
; 0000 017C         microSecond = 0;
;PCODE: $00000267 VOL: 0
; 0000 017D         sysclk=0;
;PCODE: $00000268 VOL: 0
; 0000 017E         prt=1;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 017F 
; 0000 0180     }
; 0000 0181     if(Second==60)
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0182     {
; 0000 0183         Minute++;
;PCODE: $0000026F VOL: 0
; 0000 0184         Second =0;
;PCODE: $00000270 VOL: 0
; 0000 0185         sysclk=0;
;PCODE: $00000271 VOL: 0
; 0000 0186 
; 0000 0187     }
; 0000 0188     if(Minute==60)
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0189     {
; 0000 018A         Hour++;
;PCODE: $00000276 VOL: 0
; 0000 018B         Minute = 0;
;PCODE: $00000277 VOL: 0
; 0000 018C     }
; 0000 018D     if(Hour==24)
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 018E     {
; 0000 018F         Day++;
;PCODE: $0000027C VOL: 0
; 0000 0190         Hour = 0;
;PCODE: $0000027D VOL: 0
; 0000 0191         eod=1;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0192     }
; 0000 0193     if(Month==1 || Month==3 || Month==5 || Month==7 || Month==8 || Month==10 || Month ==12)
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 0194     {
; 0000 0195         if(Day==32)
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0196         {
; 0000 0197             Month++;
;PCODE: $0000029B VOL: 0
; 0000 0198             Day = 1;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0199         }
; 0000 019A     }
;PCODE: $0000029E VOL: 0
; 0000 019B     else
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 019C     {
; 0000 019D         if(Month == 2 && Year%4!=0)
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 019E         {
; 0000 019F             if(Day==29)
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 01A0             {
; 0000 01A1                 Month++;
;PCODE: $000002B0 VOL: 0
; 0000 01A2                 Day = 1;
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 01A3             }
; 0000 01A4             else if(Day == 30)
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01A5             {
; 0000 01A6                 Month++;
;PCODE: $000002B8 VOL: 0
; 0000 01A7                 Day =1;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 01A8             }
; 0000 01A9         }
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 01AA         else
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 01AB         {
; 0000 01AC             if(Day==31)
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 01AD             {
; 0000 01AE                 Month++;
;PCODE: $000002C2 VOL: 0
; 0000 01AF                 Day = 1;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 01B0             }
; 0000 01B1         }
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 01B2     }
;PCODE: $000002C7 VOL: 0
; 0000 01B3     if(Month==13)
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 01B4     {
; 0000 01B5         Year++;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 01B6         Month=1;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01B7     }
; 0000 01B8     if(prt==1)
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 01B9     {
; 0000 01BA        output_time();
;PCODE: $000002D4 VOL: 0
; 0000 01BB     }
; 0000 01BC     if(eod==1)
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 01BD     {
; 0000 01BE         output_day();
;PCODE: $000002D9 VOL: 0
; 0000 01BF     }
; 0000 01C0 }
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
