;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Trial-5
;Version : 0.0
;Date    : 2015/5/1
;Author  : henry1758f@gmail.com
;Company : KUAS EE501
;Comments:
;
;
;Chip type               : AT90S8535
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <90s8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x30
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;#include <delay.h>
;
;/*TIMER SETTING CONFIG DEFINE*/
;#define STOP 0x00
;#define FOSC1 0x01
;#define FOSC8 0x02
;#define FOSC64 0x03
;#define FOSC256 0x04
;#define FOSC1024 0x05
;/*TIMER0 SET*/
;#define T0SET FOSC64
;
;unsigned char eLED[5]={0b00001111,0b00001110,0b00001101,0b00001011,0b00000111};

	.DSEG
;unsigned char LED[10]={0b01111110,0b00001100,0b10110110,0b10011110,0b11001100,0b11011010,0b11111010,0b00001110,0b11111110,0b11011110};
;//unsigned int num;
;
;void output(unsigned char[4]);
;void decoder(unsigned int);
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 002D {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 002E // Place your code here
; 0000 002F 
; 0000 0030 }
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;
;unsigned int adc_data;
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0036 {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0037 // Read the AD conversion result
; 0000 0038     adc_data=ADCW;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0039     decoder(adc_data);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003A }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;// Read the AD conversion result
;// with noise canceling
;unsigned int read_adc(unsigned char adc_input)
; 0000 003F {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0040 ADMUX=adc_input;
;PCODE: $0000001A VOL: 0
;	adc_input -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0041 // Delay needed for the stabilization of the ADC input voltage
; 0000 0042 delay_us(10);
;PCODE: $0000001D VOL: 0
; 0000 0043 #asm
;PCODE: $0000001E VOL: 0
; 0000 0044     in   r30,mcucr
    in   r30,mcucr
;PCODE: $0000001F VOL: 0
; 0000 0045     cbr  r30,__sm_mask
    cbr  r30,__sm_mask
;PCODE: $00000020 VOL: 0
; 0000 0046     sbr  r30,__se_bit
    sbr  r30,__se_bit
;PCODE: $00000021 VOL: 0
; 0000 0047     out  mcucr,r30
    out  mcucr,r30
;PCODE: $00000022 VOL: 0
; 0000 0048     sleep
    sleep
;PCODE: $00000023 VOL: 0
; 0000 0049     cbr  r30,__se_bit
    cbr  r30,__se_bit
;PCODE: $00000024 VOL: 0
; 0000 004A     out  mcucr,r30
    out  mcucr,r30
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 004B #endasm
; 0000 004C return adc_data;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004D }
;PCODE: $0000002A VOL: 0
;
;void decoder(unsigned int inum)
; 0000 0050 {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0051     unsigned char onum[4];
; 0000 0052     if(inum<10)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;	inum -> Y+4
;	onum -> Y+0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0053     {
; 0000 0054         onum[0]=inum;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0055         onum[1]=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0056         onum[2]=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0057         onum[3]=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0058     }
; 0000 0059     else if(inum<100 && inum>=10)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005A     {
; 0000 005B         onum[0]=inum%10;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005C         inum=(inum-inum%10)/10;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 005D         onum[1]=inum%10;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005E         onum[2]=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 005F         onum[3]=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0060     }
; 0000 0061     else if(inum<1000 && inum>=100)
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0062     {
; 0000 0063         onum[0]=inum%10;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0064         inum=(inum-inum%10)/10;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0065         onum[1]=inum%10;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0066         inum=(inum-inum%10)/10;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0067         onum[2]=inum%10;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0068         onum[3]=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0069     }
; 0000 006A     else if(inum<10000 && inum>=1000)
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 006B     {
; 0000 006C         onum[0]=inum%10;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 006D         inum=(inum-inum%10)/10;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 006E         onum[1]=inum%10;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 006F         inum=(inum-inum%10)/10;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0070         onum[2]=inum%10;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0071         inum=(inum-inum%10)/10;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0072         onum[3]=inum%10;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0073     }
; 0000 0074     output(onum);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0075 }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;
;void output(unsigned char in[4])
; 0000 0078 {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0079     unsigned char i;
; 0000 007A     for(i=1;i<5;i++)
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;	in -> Y+1
;	i -> R16
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 007B     {
; 0000 007C         PORTC = eLED[i];//eLED[i];
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 007D         PORTB = LED[in[i-1]];//LED[in[i-1]];
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 007E         delay_us(800);
;PCODE: $000000DD VOL: 0
; 0000 007F     }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0080 }
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0085 {
;PCODE: $000000E8 VOL: 0
; 0000 0086 // Declare your local variables here
; 0000 0087 
; 0000 0088 // Input/Output Ports initialization
; 0000 0089 // Port A initialization
; 0000 008A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 008B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 008C PORTA=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 008D DDRA=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 008E 
; 0000 008F // Port B initialization
; 0000 0090 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0091 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0092 PORTB=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0093 DDRB=0xFF;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0094 
; 0000 0095 // Port C initialization
; 0000 0096 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0097 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 0098 PORTC=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0099 DDRC=0x0F;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 009A 
; 0000 009B // Port D initialization
; 0000 009C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 009D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 009E PORTD=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 009F DDRD=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00A0 
; 0000 00A1 // Timer/Counter 0 initialization
; 0000 00A2 // Clock source: System Clock
; 0000 00A3 // Clock value: Timer 0 Stopped
; 0000 00A4 TCCR0=0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00A5 TCNT0=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00A6 
; 0000 00A7 // Timer/Counter 1 initialization
; 0000 00A8 // Clock source: System Clock
; 0000 00A9 // Clock value: Timer1 Stopped
; 0000 00AA // Mode: Normal top=0xFFFF
; 0000 00AB // OC1A output: Discon.
; 0000 00AC // OC1B output: Discon.
; 0000 00AD // Noise Canceler: Off
; 0000 00AE // Input Capture on Falling Edge
; 0000 00AF // Timer1 Overflow Interrupt: Off
; 0000 00B0 // Input Capture Interrupt: Off
; 0000 00B1 // Compare A Match Interrupt: Off
; 0000 00B2 // Compare B Match Interrupt: Off
; 0000 00B3 TCCR1A=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00B4 TCCR1B=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00B5 TCNT1H=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00B6 TCNT1L=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00B7 OCR1AH=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00B8 OCR1AL=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00B9 OCR1BH=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00BA OCR1BL=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00BB 
; 0000 00BC // Timer/Counter 2 initialization
; 0000 00BD // Clock source: System Clock
; 0000 00BE // Clock value: Timer2 Stopped
; 0000 00BF // Mode: Normal top=0xFF
; 0000 00C0 // OC2 output: Disconnected
; 0000 00C1 ASSR=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00C2 TCCR2=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00C3 TCNT2=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00C4 OCR2=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00C5 
; 0000 00C6 // External Interrupt(s) initialization
; 0000 00C7 // INT0: Off
; 0000 00C8 // INT1: Off
; 0000 00C9 GIMSK=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00CA MCUCR=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00CB 
; 0000 00CC // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00CD TIMSK=0x01;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00CE 
; 0000 00CF // UART initialization
; 0000 00D0 // UART disabled
; 0000 00D1 UCR=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00D2 
; 0000 00D3 // Analog Comparator initialization
; 0000 00D4 // Analog Comparator: Off
; 0000 00D5 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00D6 ACSR=0x80;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00D7 
; 0000 00D8 // ADC initialization
; 0000 00D9 // ADC Clock frequency: 1000.000 kHz
; 0000 00DA ADCSR=0x8B;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00DB 
; 0000 00DC // SPI initialization
; 0000 00DD // SPI disabled
; 0000 00DE SPCR=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00DF 
; 0000 00E0 // Global enable interrupts
; 0000 00E1 #asm("sei")
;PCODE: $00000123 VOL: 0
	sei
;PCODE: $00000124 VOL: 0
; 0000 00E2 
; 0000 00E3       while (1)
;PCODE: $00000125 VOL: 0
; 0000 00E4       {
; 0000 00E5             read_adc(0x00);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00E6       }
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00E7 }
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
