;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2015/6/2
;Author  : PerTic@n
;Company : If You Like This Software,Buy It
;Comments:
;
;
;Chip type               : AT90S8535
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <90s8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x30
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;
;#define true 1
;#define false 0
;/*TIMER SETTING CONFIG DEFINE*/
;#define STOP 0x00
;#define FOSC1 0x01
;#define FOSC8 0x02
;#define FOSC64 0x03
;#define FOSC256 0x04
;#define FOSC1024 0x05
;/*TIMER0 SET*/
;#define T0SET FOSC1024
;
;/*DATA*/
;unsigned char Keypad[16]={0xEE,0xED,0xEB,0xE7,
;                          0xDE,0xDD,0xDB,0xD7,
;                          0xBE,0xBD,0xBB,0xB7,
;                          0x7E,0x7D,0x7B,0x77};

	.DSEG
;unsigned char pressed,numb;
;void output();
;void pop(unsigned char);
;eeprom unsigned int num;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0038 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0039     unsigned char i,j,k=0;
; 0000 003A     unsigned char kbsw[4]={0xF7,0xFB,0xFD,0xFE};
; 0000 003B     for(i=0;i<=3;i++)
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	i -> R16
;	j -> R17
;	k -> R18
;	kbsw -> Y+3
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003C     {
; 0000 003D         PORTA=kbsw[i];
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003E         /*if(PINA==kbsw[i])
; 0000 003F         {
; 0000 0040             pressed == true;
; 0000 0041         } */
; 0000 0042         for(j=0;j<16;j++)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0043         {
; 0000 0044             if(PINA==Keypad[j])
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0045             {
; 0000 0046                 /*if((num&0x000F)!=j)
; 0000 0047                 {
; 0000 0048                     pop(j);
; 0000 0049                     pressed=j;
; 0000 004A                     k=1;
; 0000 004B                     //delay_ms(10);
; 0000 004C                     return;
; 0000 004D                 }
; 0000 004E                 else if((num&0x000F)==j && (pressed == 0xFF))
; 0000 004F                 {
; 0000 0050                     pop(j);
; 0000 0051                     pressed=j;
; 0000 0052                     k=1;
; 0000 0053                     return;
; 0000 0054                     delay_ms(10);
; 0000 0055                 }
; 0000 0056                 else
; 0000 0057                 {
; 0000 0058                     k=1;
; 0000 0059                 } */
; 0000 005A                 if(j==0)
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 005B                 {
; 0000 005C                     num=0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005D                     output();
;PCODE: $0000003D VOL: 0
; 0000 005E                 }
; 0000 005F             }
;PCODE: $0000003E VOL: 0
; 0000 0060         }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0061     }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0062     if(k==0)
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0063     {
; 0000 0064         pressed=0xFF;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0065     }
; 0000 0066     else
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0067     {
; 0000 0068         return;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0069     }
;PCODE: $00000054 VOL: 0
; 0000 006A 
; 0000 006B }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0070 {
;PCODE: $0000005A VOL: 0
; 0000 0071 // Declare your local variables here
; 0000 0072 
; 0000 0073 // Input/Output Ports initialization
; 0000 0074 // Port A initialization
; 0000 0075 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0076 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 0077 PORTA=0xF0;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0078 DDRA=0x0F;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0079 
; 0000 007A // Port B initialization
; 0000 007B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 007D PORTB=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007E DDRB=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007F 
; 0000 0080 // Port C initialization
; 0000 0081 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0082 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0083 PORTC=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0084 DDRC=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0085 
; 0000 0086 // Port D initialization
; 0000 0087 // Func7=In Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 0088 // State7=T State6=1 State5=T State4=T State3=T State2=T State1=0 State0=0
; 0000 0089 PORTD=0x41;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008A DDRD=0x71;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 008B 
; 0000 008C // Timer/Counter 0 initialization
; 0000 008D // Clock source: System Clock
; 0000 008E // Clock value: Timer 0 Stopped
; 0000 008F TCCR0=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0090 TCNT0=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0091 
; 0000 0092 // Timer/Counter 1 initialization
; 0000 0093 // Clock source: System Clock
; 0000 0094 // Clock value: Timer1 Stopped
; 0000 0095 // Mode: Normal top=0xFFFF
; 0000 0096 // OC1A output: Discon.
; 0000 0097 // OC1B output: Discon.
; 0000 0098 // Noise Canceler: Off
; 0000 0099 // Input Capture on Falling Edge
; 0000 009A // Timer1 Overflow Interrupt: Off
; 0000 009B // Input Capture Interrupt: Off
; 0000 009C // Compare A Match Interrupt: Off
; 0000 009D // Compare B Match Interrupt: Off
; 0000 009E TCCR1A=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 009F TCCR1B=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00A0 TCNT1H=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00A1 TCNT1L=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A2 OCR1AH=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A3 OCR1AL=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A4 OCR1BH=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A5 OCR1BL=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00A6 
; 0000 00A7 // Timer/Counter 2 initialization
; 0000 00A8 // Clock source: System Clock
; 0000 00A9 // Clock value: Timer2 Stopped
; 0000 00AA // Mode: Normal top=0xFF
; 0000 00AB // OC2 output: Disconnected
; 0000 00AC ASSR=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00AD TCCR2=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00AE TCNT2=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00AF OCR2=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00B0 
; 0000 00B1 // External Interrupt(s) initialization
; 0000 00B2 // INT0: Off
; 0000 00B3 // INT1: Off
; 0000 00B4 GIMSK=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00B5 MCUCR=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00B6 
; 0000 00B7 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B8 TIMSK=0x01;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00B9 
; 0000 00BA // UART initialization
; 0000 00BB // UART disabled
; 0000 00BC UCR=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00BD 
; 0000 00BE // Analog Comparator initialization
; 0000 00BF // Analog Comparator: Off
; 0000 00C0 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00C1 ACSR=0x80;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00C2 
; 0000 00C3 // ADC initialization
; 0000 00C4 // ADC disabled
; 0000 00C5 ADCSR=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00C6 
; 0000 00C7 // SPI initialization
; 0000 00C8 // SPI disabled
; 0000 00C9 SPCR=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00CA 
; 0000 00CB // Alphanumeric LCD initialization
; 0000 00CC // Connections are specified in the
; 0000 00CD // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00CE // RS - PORTD Bit 5
; 0000 00CF // RD - PORTD Bit 4
; 0000 00D0 // EN - PORTD Bit 0
; 0000 00D1 // D4 - PORTB Bit 0
; 0000 00D2 // D5 - PORTB Bit 1
; 0000 00D3 // D6 - PORTB Bit 2
; 0000 00D4 // D7 - PORTB Bit 3
; 0000 00D5 // Characters/line: 16
; 0000 00D6 lcd_init(16);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00D7 
; 0000 00D8 // Global enable interrupts
; 0000 00D9 #asm("sei")
;PCODE: $00000097 VOL: 0
	sei
;PCODE: $00000098 VOL: 0
; 0000 00DA //lcd_clear();
; 0000 00DB lcd_gotoxy(2,0);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00DC lcd_putsf("= Trial-10 =");
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00DD lcd_gotoxy(2,1);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00DE lcd_putsf("LCD Enable");
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00DF delay_ms(1000);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00E0 lcd_clear();
;PCODE: $000000A9 VOL: 0
; 0000 00E1 
; 0000 00E2 delay_ms(1000);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00E3 TCCR0=FOSC1024;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00E4 output();
;PCODE: $000000AE VOL: 0
; 0000 00E5 while (1)
;PCODE: $000000AF VOL: 0
; 0000 00E6       {
; 0000 00E7             if(PIND.2==0)
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00E8             {
; 0000 00E9                 num++;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00EA                 output();
;PCODE: $000000B8 VOL: 0
; 0000 00EB                 while(PIND.2==0);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00EC             }
; 0000 00ED       }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00EE 
; 0000 00EF }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;
;void pop(unsigned char keyin)
; 0000 00F2 {
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F3         num=keyin;
;PCODE: $000000C7 VOL: 0
;	keyin -> Y+0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00F4         output();
;PCODE: $000000CC VOL: 0
; 0000 00F5         return;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00F6 }
;PCODE: $000000CF VOL: 0
;
;void output()
; 0000 00F9 {
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00FA     unsigned char a[6];
; 0000 00FB     lcd_clear();
;PCODE: $000000D2 VOL: 0
;	a -> Y+0
;PCODE: $000000D3 VOL: 0
; 0000 00FC     itoa(num,a);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00FD     lcd_gotoxy(0,0);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00FE     lcd_puts(a);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00FF }
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
